// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "prisma-zod-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String     @id @default(cuid())
    name                String?
    email               String?    @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    posts               Post[]
    pizza               Pizza[]
    topping             Topping[]
    vote                Vote[]
    proposalCreator     Proposal[] @relation(name: "creator")
    proposalParticipant Proposal[] @relation(name: "participant")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Pizza {
    id          String    @id @default(cuid())
    // Name of the pizza
    name        String
    // Many-to-many relation with Topping through a helper table
    toppings    Topping[]
    // Relation to User model to track who created the pizza
    createdById String
    // Link back to User table
    createdBy   User      @relation(fields: [createdById], references: [id])
    Vote        Vote[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("pizzas")
}

model Topping {
    id          String   @id @default(cuid())
    // Name of the topping
    name        String
    // Category of the topping (enum for type safety)
    category    Category
    // Relation to User model to track who created the topping
    createdById String
    // Link back to User table
    createdBy   User     @relation(fields: [createdById], references: [id])
    // is approved?
    approved    Boolean  @default(false)
    Pizza       Pizza[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("toppings")
}

// Enum for topping categories
enum Category {
    sauce
    cheese
    vegetable
    fruit
    meat
    grain
    finishingSauce
    other
}

model Proposal {
    id           String   @id @default(cuid())
    name         String
    // Relation to User model to track who created the proposal
    createdById  String
    // Link back to User table
    createdBy    User     @relation(name: "creator", fields: [createdById], references: [id])
    // Creation date and time of the proposal
    createdAt    DateTime @default(now())
    // Duration of the proposal in seconds
    expiresAt    DateTime
    // One-to-many relation with Vote
    votes        Vote[]
    // Who can participate in the proposal
    participants User[]   @relation(name: "participant")

    @@map("proposals")
}

model Vote {
    id         String   @id @default(cuid())
    // Relation to User model to represent the voter
    userId     String
    // Link to the User table
    user       User     @relation(fields: [userId], references: [id])
    // Relation to Proposal model to indicate which proposal is voted on
    proposalId String
    // Link to the Proposal table
    proposal   Proposal @relation(fields: [proposalId], references: [id])
    // Relation to Pizza model to indicate which pizza is voted on (optional)
    pizzaId    String?
    // Link to the Pizza table (optional)
    pizza      Pizza?   @relation(fields: [pizzaId], references: [id])

    @@unique([userId, proposalId], name: "oneVotePerUserPerProposal")
    @@map("votes")
}
